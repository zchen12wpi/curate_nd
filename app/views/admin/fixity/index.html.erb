<div id="fixity_body" class="fixity-body">
  <form action="/admin/fixity" method="get" class="form-group">
    <legend>Filters</legend>
    <div class="col-sm-5">
      <div class="form-group string">
        <span class="control-label">Item:</span>
        <input name="item" class="controls string input-xlarge" v-model="filters.item" placeholder="id00000x">
      </div>
      <div class="form-group string">
        <span class="control-label">Status:</span>
        <select name="status" v-model="filters.status.selected">
          <option v-for="option in filters.status.options" v-bind:value="option.value">
            {{ option.text }}
          </option>
        </select>
      </div>
    </div>
    <div class="col-sm-5">
      <div class="form-group string">
        <span class="control-label">Start Date:</span>
        <input name="scheduled_time_start" class="controls string input-xlarge" v-model="filters.scheduled_time_start">
      </div>
      <div class="form-group string">
        <span class="control-label">End Date:</span>
        <input name="scheduled_time_end" class="controls string input-xlarge" v-model="filters.scheduled_time_end">
      </div>
    </div>
    <div class="col-sm-10">
      <button type="submit" class="form-group btn btn-primary">Update</button>
    </div>
  </form>
  <div class="form-group string">
    <legend>Fixity Checks</legend>
    <span class="control-label">Limit to:</span>
    <select name="limit" v-model="limits.selected">
      <option v-for="option in limits.options" v-bind:value="option.value">
        {{ option.text }}
      </option>
    </select>
  </div>
  <div class="form-group string">
    <span v-if="limitedEntries.length < sortedEntries.length">{{ sortedEntries.length - limitedEntries.length }} results are not being displayed.</span>
  </div>
  <table class="table table-striped table-sortable">
    <thead>
      <tr>
        <th v-bind:class="sortClass('ID')" v-on:click="changeSort('ID')">ID</th>
        <th v-bind:class="sortClass('Item')" v-on:click="changeSort('Item')">Item</th>
        <th v-bind:class="sortClass('Scheduled_time')" v-on:click="changeSort('Scheduled_time')">Scheduled Time</th>
        <th v-bind:class="sortClass('Status')" v-on:click="changeSort('Status')">Status</th>
        <th v-bind:class="sortClass('Notes')" v-on:click="changeSort('Notes')">Notes</th>
      </tr>
    </thead>
    <tbody>
      <tr v-for="entry in limitedEntries">
        <td>{{ entry.ID }}</td>
        <td>{{ entry.Item }}</td>
        <td>{{ entry.Scheduled_time }}</td>
        <td>{{ entry.Status }}</td>
        <td>{{ entry.Notes }}</td>
      </tr>
    </tbody>
  </table>
</div>

<%= javascript_include_tag "https://unpkg.com/vue" %>
<%= javascript_include_tag "https://unpkg.com/vue-router" %>
<%= javascript_tag do -%>
  var router = new VueRouter({
      mode: 'history',
      routes: []
  })

  var vueApp = new Vue({
    router,
    el: '#fixity_body',
    data() {
      return {
        entries: JSON.parse('<%= raw(@fixity_results.to_json) %>'),
        limits: {
          selected: 10,
          options: [
            { text: '10', value: 10 },
            { text: '50', value: 50 },
            { text: '100', value: 100 },
            { text: '1000', value: 1000 }
          ]
        },
        sortField: 'ID',
        sortDirection: -1,
        filters: {
          item: this.$route.query.item || null,
          scheduled_time_start: this.$route.query.scheduled_time_start || this.timeToday(0,0,0,0),
          scheduled_time_end: this.$route.query.scheduled_time_end || this.timeToday(23,59,59,999),
          status: {
            selected: this.$route.query.status || '',
            options: [
              { text: 'Any', value: '' },
              { text: 'Ok', value: 'ok' },
              { text: 'Error', value: 'error' },
              { text: 'Scheduled', value: 'scheduled' },
              { text: 'Mismatch', value: 'mismatch' }
            ]
          },
        }
      }
    },
    computed: {
      sortedEntries: function () {
        // For now this just sorts as a string. May need to do dates at some point
        return this.entries.sort((a, b) => {
          var av = String(a[this.sortField])
          var bv = String(b[this.sortField])
          return this.sortDirection * av.localeCompare(bv)
        })
      },
      limitedEntries: function() {
        return this.sortedEntries.slice(0, this.limits.selected)
      }
    },
    methods: {
      changeSort: function (field) {
        if(this.sortField === field)
          this.sortDirection *= -1
        else {
          this.sortDirection = 1
          this.sortField = field
        }
      },
      sortClass: function (field) {
        if(this.sortField === field)
          return this.sortDirection === 1 ? 'asc' : 'desc'
        return ''
      },
      timeToday: function (h, m, s, ms) {
        var date = new Date()
        date.setHours(h, m, s, ms)
        return date.toISOString()
      }
    }
  })
<% end -%>
